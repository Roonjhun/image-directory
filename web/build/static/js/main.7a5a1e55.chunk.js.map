{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["API","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","event","file","target","files","setState","selectedFile","onClickHandler","state","console","log","data","FormData","append","axios","post","then","res","cogoToast","success","getImages","catch","err","error","loading","images","_this2","get","response","react_default","a","createElement","className","BeatLoader_default","size","color","type","onChange","onClick","Gallery_default","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gPAQMA,EAAM,6CAISC,cACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAoBRQ,gBAAkB,SAAAC,GAChB,IAAIC,EAAOD,EAAME,OAAOC,MAAM,GAC9BX,EAAKY,SAAS,CACZC,aAAcJ,KAxBCT,EA4BnBc,eAAiB,WACf,GAAKd,EAAKe,MAAMF,aAAhB,CAGAG,QAAQC,IAAIjB,EAAKe,OACjB,IAAMG,EAAO,IAAIC,SAEjBD,EAAKE,OAAO,QAASpB,EAAKe,MAAMF,cAChCQ,IAAMC,KAAKzB,EAAKqB,GACbK,KAAK,SAAAC,GACJR,QAAQC,IAAIO,GACZC,IAAUC,QAAQ,yBAClB1B,EAAK2B,cAENC,MAAM,SAAAC,GACLJ,IAAUK,MAAM,cAAeD,OAzCnC7B,EAAKe,MAAQ,CACXF,aAAc,KACdkB,SAAS,EACTC,OAAQ,IALOhC,mFAWjBG,KAAKwB,gDAIK,IAAAM,EAAA9B,KACVA,KAAKS,SAAS,CAAEmB,SAAS,IACzBV,IAAMa,IAAIrC,GACP0B,KAAK,SAAAY,GAAQ,OAAIF,EAAKrB,SAAS,CAAEoB,OAAQG,EAASjB,KAAMa,SAAS,uCA8BpE,OACEK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,WAAMF,EAAAC,EAAAC,cAAA,WACNF,EAAAC,EAAAC,cAAA,qBAGEF,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CACEI,KAAM,GACNC,MAAO,oBACPX,QAAS5B,KAAKY,MAAMgB,WAGpB5B,KAAKY,MAAMgB,SACXK,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAOK,KAAK,OAAOC,SAAUzC,KAAKI,kBAElC6B,EAAAC,EAAAC,cAAA,UAAQK,KAAK,SAASE,QAAS1C,KAAKW,gBAApC,YAONsB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,CAASL,OAAQ7B,KAAKY,MAAMiB,iBAzEHe,aCAbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACLlB,EAAAC,EAAAC,cAACiB,EAAD,MACFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrC,KAAK,SAAAsC,GACjCA,EAAaC","file":"static/js/main.7a5a1e55.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport cogoToast from 'cogo-toast';\nimport 'react-toastify/dist/ReactToastify.css';\nimport Gallery from 'react-grid-gallery';\nimport BeatLoader from 'react-spinners/BeatLoader';\n\n\nconst API = 'https://image-directory.appspot.com/images';\n// const API = 'http://localhost:4000/images';\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selectedFile: null,\n      loading: false,\n      images: [],\n    }\n\n  }\n\n  componentDidMount() {\n    this.getImages()\n  }\n\n\n  getImages() {\n    this.setState({ loading: true })\n    axios.get(API)\n      .then(response => this.setState({ images: response.data, loading: false }));\n  }\n\n  onChangeHandler = event => {\n    let file = event.target.files[0]\n    this.setState({\n      selectedFile: file\n    })\n  }\n\n  onClickHandler = () => {\n    if (!this.state.selectedFile) {\n      return\n    }\n    console.log(this.state)\n    const data = new FormData()\n\n    data.append('photo', this.state.selectedFile)\n    axios.post(API, data)\n      .then(res => {\n        console.log(res)\n        cogoToast.success('Uploaded successfully');\n        this.getImages()\n      })\n      .catch(err => {\n        cogoToast.error('upload fail', err)\n      })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <br /><br />\n        <center>\n          Demo\n\n          <BeatLoader\n            size={18}\n            color={'rgb(54, 215, 183)'}\n            loading={this.state.loading}\n          />\n\n          {!this.state.loading &&\n            <div>\n              <input type=\"file\" onChange={this.onChangeHandler} />\n\n              <button type=\"button\" onClick={this.onClickHandler}>Upload</button>\n\n            </div>\n\n          }\n        </center>\n\n        <br />\n        <Gallery images={this.state.images} />\n\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <App />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}